/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.5
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */




#include "../../../uscxml/Message.h"
#include "../../../uscxml/Interpreter.h"

using namespace uscxml;




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "uscxmlJAVA_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1Data_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uscxml::Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uscxml::Data *)new uscxml::Data();
  *(uscxml::Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1Data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::Data::Type arg2 ;
  uscxml::Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg2 = (uscxml::Data::Type)jarg2; 
  result = (uscxml::Data *)new uscxml::Data((std::string const &)*arg1,arg2);
  *(uscxml::Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1Data_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (uscxml::Data *)new uscxml::Data((std::string const &)*arg1);
  *(uscxml::Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_delete_1Data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uscxml::Data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1fromXML(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::Data result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = uscxml::Data::fromXML((std::string const &)*arg1);
  *(uscxml::Data **)&jresult = new uscxml::Data((const uscxml::Data &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1toDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  Arabica::DOM::Document< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result = (arg1)->toDocument();
  *(Arabica::DOM::Document< std::string > **)&jresult = new Arabica::DOM::Document< std::string >((const Arabica::DOM::Document< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result = (arg1)->toXMLString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1compound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::map< std::string,uscxml::Data > *arg2 = (std::map< std::string,uscxml::Data > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  arg2 = *(std::map< std::string,uscxml::Data > **)&jarg2; 
  if (arg1) (arg1)->compound = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1compound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::map< std::string,uscxml::Data > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result = (std::map< std::string,uscxml::Data > *)& ((arg1)->compound);
  *(std::map< std::string,uscxml::Data > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::vector< uscxml::Data > *arg2 = (std::vector< uscxml::Data > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  arg2 = *(std::vector< uscxml::Data > **)&jarg2; 
  if (arg1) (arg1)->array = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::vector< uscxml::Data > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result = (std::vector< uscxml::Data > *)& ((arg1)->array);
  *(std::vector< uscxml::Data > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1atom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->atom = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1atom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result =  ((arg1)->atom);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  uscxml::Data::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  arg2 = (uscxml::Data::Type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Data_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  uscxml::Data *arg1 = (uscxml::Data *) 0 ;
  uscxml::Data::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Data **)&jarg1; 
  result = (uscxml::Data::Type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1Event(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uscxml::Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uscxml::Event *)new uscxml::Event();
  *(uscxml::Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->name);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  uscxml::Event::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  arg2 = (uscxml::Event::Type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  uscxml::Event::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result = (uscxml::Event::Type) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1origin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->origin = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1origin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->origin);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1origintype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->origintype = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1origintype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->origintype);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1dom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  Arabica::DOM::Node< std::string > arg2 ;
  Arabica::DOM::Node< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(Arabica::DOM::Node< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Arabica::DOM::Node< std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dom = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1dom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  Arabica::DOM::Node< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->dom);
  *(Arabica::DOM::Node< std::string > **)&jresult = new Arabica::DOM::Node< std::string >((const Arabica::DOM::Node< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1sendid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sendid = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1sendid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->sendid);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1invokeid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->invokeid = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1invokeid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result =  ((arg1)->invokeid);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1fromXML(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::Event result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = uscxml::Event::fromXML((std::string const &)*arg1);
  *(uscxml::Event **)&jresult = new uscxml::Event((const uscxml::Event &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1toDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  Arabica::DOM::Document< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result = (arg1)->toDocument();
  *(Arabica::DOM::Document< std::string > **)&jresult = new Arabica::DOM::Document< std::string >((const Arabica::DOM::Document< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Event **)&jarg1; 
  result = (arg1)->toXMLString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_delete_1Event(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uscxml::Event **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->type);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1src_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->src = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1src_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->src);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1namelist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->namelist = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1namelist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->namelist);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1autoForward_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoForward = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1autoForward_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result = (bool) ((arg1)->autoForward);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1finalize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  Arabica::DOM::Node< std::string > arg2 ;
  Arabica::DOM::Node< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(Arabica::DOM::Node< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Arabica::DOM::Node< std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->finalize = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1finalize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  Arabica::DOM::Node< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->finalize);
  *(Arabica::DOM::Node< std::string > **)&jresult = new Arabica::DOM::Node< std::string >((const Arabica::DOM::Node< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::map< std::string,std::string > arg2 ;
  std::map< std::string,std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(std::map< std::string,std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->params = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->params);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result =  ((arg1)->content);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1fromXML(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::InvokeRequest result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = uscxml::InvokeRequest::fromXML((std::string const &)*arg1);
  *(uscxml::InvokeRequest **)&jresult = new uscxml::InvokeRequest((const uscxml::InvokeRequest &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1toDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  Arabica::DOM::Document< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result = (arg1)->toDocument();
  *(Arabica::DOM::Document< std::string > **)&jresult = new Arabica::DOM::Document< std::string >((const Arabica::DOM::Document< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  result = (arg1)->toXMLString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1InvokeRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uscxml::InvokeRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uscxml::InvokeRequest *)new uscxml::InvokeRequest();
  *(uscxml::InvokeRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_delete_1InvokeRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uscxml::InvokeRequest *arg1 = (uscxml::InvokeRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uscxml::InvokeRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->target);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->type);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1delayMs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->delayMs = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1delayMs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->delayMs);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1params_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::map< std::string,std::string > arg2 ;
  std::map< std::string,std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(std::map< std::string,std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->params = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1params_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->params);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1namelist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::map< std::string,std::string > arg2 ;
  std::map< std::string,std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(std::map< std::string,std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->namelist = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1namelist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->namelist);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->content = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result =  ((arg1)->content);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1fromXML(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::SendRequest result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = uscxml::SendRequest::fromXML((std::string const &)*arg1);
  *(uscxml::SendRequest **)&jresult = new uscxml::SendRequest((const uscxml::SendRequest &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1toDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  Arabica::DOM::Document< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result = (arg1)->toDocument();
  *(Arabica::DOM::Document< std::string > **)&jresult = new Arabica::DOM::Document< std::string >((const Arabica::DOM::Document< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1toXMLString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  result = (arg1)->toXMLString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1SendRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uscxml::SendRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uscxml::SendRequest *)new uscxml::SendRequest();
  *(uscxml::SendRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_delete_1SendRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uscxml::SendRequest *arg1 = (uscxml::SendRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uscxml::SendRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_new_1Interpreter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  uscxml::Interpreter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (uscxml::Interpreter *)new uscxml::Interpreter((std::string const &)*arg1);
  *(uscxml::Interpreter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_delete_1Interpreter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  (arg1)->start();
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  uscxml::Interpreter::run(arg1);
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1interpret(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  (arg1)->interpret();
}


SWIGEXPORT jboolean JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  result = (bool)(arg1)->validate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1waitForStabilization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  (arg1)->waitForStabilization();
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1receive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  uscxml::Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  arg2 = *(uscxml::Event **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uscxml::Event & reference is null");
    return ;
  } 
  (arg1)->receive(*arg2);
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1receiveInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  uscxml::Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  arg2 = *(uscxml::Event **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uscxml::Event & reference is null");
    return ;
  } 
  (arg1)->receiveInternal(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1getConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  Arabica::XPath::NodeSet< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  result = (arg1)->getConfiguration();
  *(Arabica::XPath::NodeSet< std::string > **)&jresult = new Arabica::XPath::NodeSet< std::string >((const Arabica::XPath::NodeSet< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  std::string *arg2 = 0 ;
  Arabica::DOM::Node< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (arg1)->getState((std::string const &)*arg2);
  *(Arabica::DOM::Node< std::string > **)&jresult = new Arabica::DOM::Node< std::string >((const Arabica::DOM::Node< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  result = (std::string *) &(arg1)->getName();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  result = (std::string *) &(arg1)->getSessionId();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1isMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  Arabica::DOM::Node< std::string > *arg1 = 0 ;
  Arabica::XPath::NodeSet< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Arabica::DOM::Node< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Arabica::DOM::Node< std::string > const & reference is null");
    return 0;
  } 
  arg2 = *(Arabica::XPath::NodeSet< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Arabica::XPath::NodeSet< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)uscxml::Interpreter::isMember((Arabica::DOM::Node< std::string > const &)*arg1,(Arabica::XPath::NodeSet< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1dump_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  uscxml::Interpreter *arg1 = (uscxml::Interpreter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uscxml::Interpreter **)&jarg1; 
  (arg1)->dump();
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1dump_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  Arabica::DOM::Node< std::string > *arg1 = 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Arabica::DOM::Node< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Arabica::DOM::Node< std::string > const & reference is null");
    return ;
  } 
  arg2 = (int)jarg2; 
  uscxml::Interpreter::dump((Arabica::DOM::Node< std::string > const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Interpreter_1dump_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Arabica::DOM::Node< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Arabica::DOM::Node< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Arabica::DOM::Node< std::string > const & reference is null");
    return ;
  } 
  uscxml::Interpreter::dump((Arabica::DOM::Node< std::string > const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_Event_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(uscxml::Data **)&baseptr = *(uscxml::Event **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_InvokeRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(uscxml::Event **)&baseptr = *(uscxml::InvokeRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_uscxml_uscxmlNativeJavaJNI_SendRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(uscxml::Event **)&baseptr = *(uscxml::SendRequest **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

