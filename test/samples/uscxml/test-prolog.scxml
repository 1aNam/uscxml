<scxml datamodel="prolog">
  <datamodel>
    <data src="" />
    <data id="father">
      bob, jim.
      bob, john.
    </data>
    <data id="">
      mother(martha, jim).
      mother(martha, john).
    </data>
    <data id="household">
      {
        name: "The Bobsons",
        members: ['bob', 'martha', 'jim', 'john']
      }
    </data>
    <data id="childs">
      <child name="jim" father="bob" />
      <child name="john" father="bob" />
    </data>
  </datamodel>
  <state id="s1">
    <onentry>
      <log label="Entering s1" expr="listing." />
      <script>
        :- dynamic ampel/1.
        ampel(false).
        ampel(X) :- retract(ampel(_)), assertz(ampel(X)).
      </script>
      <script type="query">
        ampel(true).
      </script>
      <assign location="">
        retract(father(bob, jim)).
        assert(father(steve, jim)).
        assert(father(bob, jack)).
      </assign>
      <log label="index" expr="listing." />
      <foreach array="father(bob, X)"
               item="child"
               index="index">
        <log label="index" expr="index(X)" />
        <log label="child" expr="child(X)" />
      </foreach>
    </onentry>
    <transition target="s2"
                cond="mother(martha, X), father(bob, X), in(s1)"/>
  </state>
  <state id="s2">
    <onentry>
      <send type="basichttp"
            targetexpr="ioprocessors(basichttp(location(X)))"
            event="foo">
        <content>
          <p>Snippet of XML</p>
        </content>
      </send>
    </onentry>
    <transition 
      target="end"
      event="foo"
      cond="member(element('p',_,_), X), event(data(X))" />
  </state>

  <state id="end" final="true" />
</scxml>
